{"version":3,"sources":["features/tasks/tasksApi.js","features/tasks/tasksSlice.js","features/taskForm/taskForm.js","features/tasks/tasks.js","app/app.js","app/store.js","serviceWorker.js","index.js","theme.js"],"names":["postTask","id","text","ky","post","json","tasksSchema","schema","Entity","tasksSlice","createSlice","name","initialState","byId","ids","loading","error","reducers","getTasksStart","state","getTasksSuccess","payload","tasksById","taskIds","getTasksFailure","action","addTask","completed","push","addTaskStart","syncing","addTaskSuccess","addTaskFailure","actions","reduxForm","form","connect","dispatch","reset","handleSubmit","onSubmit","Field","component","cols","rows","onKeyDown","e","keyCode","preventDefault","keyDownHandler","tasks","map","addTaskRequest","newTask","a","uuid","TasksApi","task","offline","console","getTasksRequest","get","normalize","entities","result","useEffect","className","key","taskText","App","window","configureStore","reducer","tasksReducer","formReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","theme","fonts","body","heading","monospace","colors","background","primary","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0e67e15.chunk.js","sourcesContent":["import ky from 'ky'\n\nexport const getTasks = () => ky.get('/api/tasks').json()\n\nexport const postTask = ({ id, text }) =>\n  ky\n    .post('/api/tasks', {\n      json: {\n        id,\n        text,\n      },\n    })\n    .json()\n","import { createSlice } from '@reduxjs/toolkit'\nimport { v4 as uuid } from 'uuid'\nimport * as TasksApi from './tasksApi'\nimport { normalize, schema } from 'normalizr'\n\nconst taskSchema = new schema.Entity('tasks')\nconst tasksSchema = [taskSchema]\n\nexport const tasksSlice = createSlice({\n  name: 'tasks',\n  initialState: {\n    byId: {},\n    ids: [],\n    loading: false,\n    error: null,\n  },\n  reducers: {\n    getTasksStart(state) {\n      state.loading = true\n      state.error = null\n    },\n    getTasksSuccess(state, { payload }) {\n      const { tasksById, taskIds } = payload\n      state.byId = tasksById\n      state.ids = taskIds\n      state.loading = false\n      state.error = null\n    },\n    getTasksFailure(state, action) {\n      state.loading = false\n      state.error = action.payload\n    },\n\n    addTask(state, { payload }) {\n      const { id, text } = payload\n      state.byId[id] = { id, text, completed: false }\n      state.ids.push(id)\n    },\n    addTaskStart(state, { payload }) {\n      const { id } = payload\n      state.byId[id].syncing = true\n      state.byId[id].error = null\n    },\n    addTaskSuccess(state, { payload }) {\n      const { id } = payload\n      state.byId[id] = { ...state.byId[id], ...payload }\n      state.byId[id].syncing = false\n      state.byId[id].error = null\n    },\n    addTaskFailure(state, { payload }) {\n      const { id } = payload\n      state.byId[id].syncing = false\n      state.byId[id].error = payload\n    },\n  },\n})\n\nexport const {\n  addTask,\n  getTasksStart,\n  getTasksSuccess,\n  getTasksFailure,\n  addTaskSuccess,\n} = tasksSlice.actions\n\nexport const taskCount = (state) => state.ids.length\nexport const getTasks = (state) => state.ids.map((id) => state.byId[id])\n\nexport const getTasksRequest = () => async (dispatch) => {\n  try {\n    dispatch(getTasksStart())\n\n    const tasks = await TasksApi.getTasks()\n    const { entities, result } = normalize(tasks, tasksSchema)\n    const tasksById = entities.tasks\n    const taskIds = result\n\n    dispatch(getTasksSuccess({ tasksById, taskIds }))\n  } catch (error) {\n    dispatch(getTasksFailure())\n    console.error('getTasksFailure:', error)\n  }\n}\n\nexport const addTaskRequest = (newTask) => async (dispatch) => {\n  try {\n    const { text } = newTask\n    const id = uuid()\n    dispatch(addTask({ id, text }))\n    const task = await TasksApi.postTask({ id, text })\n    dispatch(addTaskSuccess({ id: task.id, text: task.text, offline: false }))\n  } catch (error) {\n    dispatch(getTasksFailure())\n    console.error('addTaskFailure:', error)\n  }\n}\n\nexport default tasksSlice.reducer\n","import React from 'react'\nimport { Field, reduxForm, reset } from 'redux-form'\nimport { connect } from 'react-redux'\nimport t from 'prop-types'\n\nconst TaskForm = ({ handleSubmit, reset }) => {\n  const keyDownHandler = (handleSubmit) => (e) => {\n    if (e.keyCode === 13) {\n      e.preventDefault()\n      handleSubmit()\n      reset()\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Field\n        component=\"textarea\"\n        name=\"taskText\"\n        cols=\" \"\n        rows=\" \"\n        onKeyDown={keyDownHandler(handleSubmit)}\n      ></Field>\n    </form>\n  )\n}\n\nTaskForm.propTypes = {\n  handleSubmit: t.func.isRequired,\n  reset: t.func.isRequired,\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  reset: () => dispatch(reset('taskForm')),\n})\n\nexport default reduxForm({ form: 'taskForm' })(\n  connect(null, mapDispatchToProps)(TaskForm)\n)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { getTasks, getTasksRequest, addTaskRequest } from './tasksSlice'\nimport TaskForm from '../taskForm/taskForm'\nimport t from 'prop-types'\n\nconst Tasks = ({ addTaskRequest, tasks, getTasksRequest }) => {\n  useEffect(() => {\n    getTasksRequest()\n  }, [getTasksRequest])\n\n  const submit = ({ taskText }) => {\n    addTaskRequest({ text: taskText })\n  }\n\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id}>{task.text}</div>\n      ))}\n      <div></div>\n      <TaskForm onSubmit={submit} />\n    </div>\n  )\n}\n\nconst mapStateToProps = ({ tasks }) => ({\n  tasks: getTasks(tasks),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  addTaskRequest: (text) => dispatch(addTaskRequest(text)),\n  getTasksRequest: () => dispatch(getTasksRequest()),\n})\n\nTasks.propTypes = {\n  addTaskRequest: t.func.isRequired,\n  getTasksRequest: t.func.isRequired,\n  tasks: t.arrayOf(\n    t.shape({ text: t.string.isRequired, completed: t.bool.isRequired })\n  ),\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tasks)\n","import React from 'react'\r\nimport Tasks from '../features/tasks/tasks'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Tasks />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport tasksReducer from '../features/tasks/tasksSlice'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport ky from 'ky'\r\n\r\nwindow.ky = ky\r\nexport default configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n    form: formReducer,\r\n  },\r\n})\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          // eslint-disable-next-line no-console\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n\r\n              // eslint-disable-next-line no-console\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n\r\n              // eslint-disable-next-line no-console\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      // eslint-disable-next-line no-console\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      // eslint-disable-next-line no-console\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './app/app'\r\nimport store from './app/store'\r\nimport { Provider } from 'react-redux'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { ThemeProvider } from 'theme-ui'\r\nimport theme from './theme'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <App />\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","export default {\n  fonts: {\n    body: 'system-ui, sans-serif',\n    heading: '\"Avenir Next\", sans-serif',\n    monospace: 'Menlo, monospace',\n  },\n  colors: {\n    text: '#fff',\n    background: '#363537',\n    primary: '#33e',\n  },\n}\n"],"sourceRoot":""}