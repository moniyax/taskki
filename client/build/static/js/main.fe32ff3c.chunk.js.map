{"version":3,"sources":["features/tasks/tasksApi.js","features/tasks/tasksSlice.js","features/tasks/taskForm.js","features/auth/authApi.js","util/localStorageUtil.js","features/auth/authSlice.js","features/auth/authentication.js","features/tasks/tasks.js","features/auth/signInForm.js","features/auth/signIn.js","features/auth/signUpForm.js","features/auth/signUp.js","app/app.js","app/store.js","serviceWorker.js","index.js","theme.js"],"names":["postTask","id","text","ky","post","json","tasksSchema","schema","Entity","tasksSlice","createSlice","name","initialState","byId","ids","loading","error","reducers","getTasksStart","state","getTasksSuccess","payload","tasksById","taskIds","getTasksFailure","action","addTask","completed","push","addTaskStart","syncing","addTaskSuccess","addTaskFailure","actions","reduxForm","form","connect","dispatch","reset","handleSubmit","onSubmit","Field","component","cols","rows","onKeyDown","e","keyCode","preventDefault","keyDownHandler","signIn","email","password","signUp","username","save","key","item","localStorage","setItem","JSON","stringify","err","console","log","authSlice","signUpStart","pending","signUpError","signUpSuccess","currentUser","signUpFailure","signInStart","signInError","signInSuccess","signInFailure","getToken","auth","token","getSignInErrorMessage","messages","getSignUpErrorMessage","children","to","TasksContainer","tasks","map","addTaskRequest","newTask","a","uuid","TasksApi","task","offline","getTasksRequest","get","normalize","entities","result","useEffect","useDispatch","onClick","type","className","taskText","AuthTask","renderField","input","label","meta","touched","validate","values","errors","value","AuthApi","user","localStorageUtil","HTTPError","response","signInRequest","signUpRequest","App","path","SignIn","SignUp","exact","Tasks","middleware","getDefaultMiddleware","combinedReducer","combineReducers","tasksReducer","formReducer","authReducer","configureStore","reducer","removeItem","undefined","preloadedState","getItem","parse","load","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","theme","fonts","body","heading","monospace","colors","background","primary","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe32ff3c.chunk.js","sourcesContent":["import ky from 'ky'\n\nexport const getTasks = () => ky.get('/api/tasks').json()\n\nexport const postTask = ({ id, text }) =>\n  ky\n    .post('/api/tasks', {\n      json: {\n        id,\n        text,\n      },\n    })\n    .json()\n","import { createSlice } from '@reduxjs/toolkit'\nimport { v4 as uuid } from 'uuid'\nimport * as TasksApi from './tasksApi'\nimport { normalize, schema } from 'normalizr'\n\nconst taskSchema = new schema.Entity('tasks')\nconst tasksSchema = [taskSchema]\n\nexport const tasksSlice = createSlice({\n  name: 'tasks',\n  initialState: {\n    byId: {},\n    ids: [],\n    loading: false,\n    error: null,\n  },\n  reducers: {\n    getTasksStart(state) {\n      state.loading = true\n      state.error = null\n    },\n    getTasksSuccess(state, { payload }) {\n      const { tasksById, taskIds } = payload\n      state.byId = tasksById\n      state.ids = taskIds\n      state.loading = false\n      state.error = null\n    },\n    getTasksFailure(state, action) {\n      state.loading = false\n      state.error = action.payload\n    },\n\n    addTask(state, { payload }) {\n      const { id, text } = payload\n      state.byId[id] = { id, text, completed: false }\n      state.ids.push(id)\n    },\n    addTaskStart(state, { payload }) {\n      const { id } = payload\n      state.byId[id].syncing = true\n      state.byId[id].error = null\n    },\n    addTaskSuccess(state, { payload }) {\n      const { id } = payload\n      state.byId[id] = { ...state.byId[id], ...payload }\n      state.byId[id].syncing = false\n      state.byId[id].error = null\n    },\n    addTaskFailure(state, { payload }) {\n      const { id } = payload\n      state.byId[id].syncing = false\n      state.byId[id].error = payload\n    },\n  },\n})\n\nexport const {\n  addTask,\n  getTasksStart,\n  getTasksSuccess,\n  getTasksFailure,\n  addTaskSuccess,\n} = tasksSlice.actions\n\nexport const taskCount = (state) => state.ids.length\nexport const getTasks = (state) => state.ids.map((id) => state.byId[id])\n\nexport const getTasksRequest = () => async (dispatch) => {\n  try {\n    dispatch(getTasksStart())\n\n    const tasks = await TasksApi.getTasks()\n    const { entities, result } = normalize(tasks, tasksSchema)\n    const tasksById = entities.tasks\n    const taskIds = result\n\n    dispatch(getTasksSuccess({ tasksById, taskIds }))\n  } catch (error) {\n    dispatch(getTasksFailure())\n    console.error('getTasksFailure:', error)\n  }\n}\n\nexport const addTaskRequest = (newTask) => async (dispatch) => {\n  try {\n    const { text } = newTask\n    const id = uuid()\n    dispatch(addTask({ id, text }))\n    const task = await TasksApi.postTask({ id, text })\n    dispatch(addTaskSuccess({ id: task.id, text: task.text, offline: false }))\n  } catch (error) {\n    dispatch(getTasksFailure())\n    console.error('addTaskFailure:', error)\n  }\n}\n\nexport default tasksSlice.reducer\n","import React from 'react'\nimport { Field, reduxForm, reset } from 'redux-form'\nimport { connect } from 'react-redux'\nimport t from 'prop-types'\n\nconst TaskForm = ({ handleSubmit, reset }) => {\n  const keyDownHandler = (handleSubmit) => (e) => {\n    if (e.keyCode === 13) {\n      e.preventDefault()\n      handleSubmit()\n      reset()\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Field\n        component=\"textarea\"\n        name=\"taskText\"\n        cols=\" \"\n        rows=\" \"\n        onKeyDown={keyDownHandler(handleSubmit)}\n      ></Field>\n    </form>\n  )\n}\n\nTaskForm.propTypes = {\n  handleSubmit: t.func.isRequired,\n  reset: t.func.isRequired,\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  reset: () => dispatch(reset('taskForm')),\n})\n\nexport default reduxForm({ form: 'taskForm' })(\n  connect(null, mapDispatchToProps)(TaskForm)\n)\n","import ky from 'ky'\n\nexport const signIn = ({ email, password }) =>\n  ky\n    .post('/api/session', {\n      json: {\n        email,\n        password,\n      },\n    })\n    .json()\n\nexport const signUp = ({ username, email, password }) =>\n  ky\n    .post('/api/users', {\n      json: {\n        username,\n        email,\n        password,\n      },\n    })\n    .json()\n","export const load = (key) => {\n  try {\n    const item = localStorage.getItem(key)\n    if (item === null) {\n      return undefined\n    }\n    return JSON.parse(item)\n  } catch (err) {\n    return undefined\n  }\n}\n\nexport const save = (key, item) => {\n  try {\n    localStorage.setItem(key, JSON.stringify(item))\n  } catch (err) {\n    console.log(err)\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport * as AuthApi from './authApi'\nimport ky from 'ky'\nimport * as localStorageUtil from '../../util/localStorageUtil'\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState: {},\n  reducers: {\n    signUpStart(state) {\n      state.pending = true\n      state.signUpError = null\n    },\n    signUpSuccess(state, { payload }) {\n      state.currentUser = payload\n      state.pending = false\n      state.signUpError = null\n    },\n    signUpFailure(state, action) {\n      state.pending = false\n      state.signUpError = action.payload\n    },\n    signInStart(state) {\n      state.pending = true\n      state.signInError = null\n    },\n    signInSuccess(state, { payload }) {\n      state.currentUser = payload\n      state.pending = false\n      state.signInError = null\n    },\n    signInFailure(state, action) {\n      state.pending = false\n      state.signInError = action.payload\n    },\n  },\n})\n\nconst {\n  signUpStart,\n  signUpSuccess,\n  signUpFailure,\n  signInStart,\n  signInSuccess,\n  signInFailure,\n} = authSlice.actions\n\nexport const signInRequest = ({ email, password }) => async (dispatch) => {\n  try {\n    dispatch(signInStart())\n\n    const user = await AuthApi.signIn({ email, password })\n    dispatch(signInSuccess(user))\n    localStorageUtil.save('user', user)\n  } catch (_error) {\n    if (!(_error instanceof ky.HTTPError)) throw _error\n    const error = await _error.response.json()\n    dispatch(signInFailure(error))\n  }\n}\nexport const signUpRequest = ({ username, email, password }) => async (\n  dispatch\n) => {\n  try {\n    dispatch(signUpStart())\n\n    const user = await AuthApi.signUp({ username, email, password })\n    dispatch(signUpSuccess(user))\n    localStorageUtil.save('user', user)\n  } catch (_error) {\n    if (!(_error instanceof ky.HTTPError)) throw _error\n    const error = await _error.response.json()\n    dispatch(signUpFailure(error))\n  }\n}\n\nexport const getToken = (state) => state.auth.currentUser?.token\nexport const getSignInErrorMessage = (state) =>\n  state.auth.signInError?.messages[0]\nexport const getSignUpErrorMessage = (state) =>\n  state.auth.signUpError?.messages[0]\n\nexport default authSlice.reducer\n","import React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport t from 'prop-types'\nimport { getToken } from './authSlice'\n\nconst Authentication = ({ token, children }) =>\n  token ? <>{children}</> : <Redirect to=\"/signin\" />\n\nexport default connect((state) => ({ token: getToken(state) }))(\n  Authentication\n)\n\nAuthentication.propTypes = {\n  token: t.string,\n  children: t.object.isRequired,\n}\n","import React, { useEffect } from 'react'\nimport { connect, useDispatch } from 'react-redux'\nimport { getTasks, getTasksRequest, addTaskRequest } from './tasksSlice'\nimport TaskForm from './taskForm'\nimport t from 'prop-types'\nimport Authentication from '../auth/authentication'\n\nconst Tasks = ({ addTaskRequest, tasks, getTasksRequest }) => {\n  useEffect(() => {\n    getTasksRequest()\n  }, [getTasksRequest])\n\n  const submit = ({ taskText }) => {\n    addTaskRequest({ text: taskText })\n  }\n\n  const dispatch = useDispatch()\n\n  return (\n    <Authentication>\n      <>\n        <button\n          onClick={() => {\n            dispatch({ type: 'logout' })\n          }}\n        >\n          Log out\n        </button>\n        <div className=\"tasks\">\n          {tasks.map((task) => (\n            <div key={task.id}>{task.text}</div>\n          ))}\n          <TaskForm onSubmit={submit} />\n        </div>\n      </>\n    </Authentication>\n  )\n}\n\nconst mapStateToProps = ({ tasks }) => ({\n  tasks: getTasks(tasks),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  addTaskRequest: (text) => dispatch(addTaskRequest(text)),\n  getTasksRequest: () => dispatch(getTasksRequest()),\n})\n\nTasks.propTypes = {\n  addTaskRequest: t.func.isRequired,\n  getTasksRequest: t.func.isRequired,\n  tasks: t.arrayOf(\n    t.shape({ text: t.string.isRequired, completed: t.bool.isRequired })\n  ),\n}\nconst TasksContainer = connect(mapStateToProps, mapDispatchToProps)(Tasks)\n\nconst AuthTask = () => {\n  return (\n    <Authentication>\n      <TasksContainer />\n    </Authentication>\n  )\n}\n\nexport default AuthTask\n","import React from 'react'\nimport { reduxForm, Field } from 'redux-form'\nimport t from 'prop-types'\n\nconst validate = (values) => {\n  const errors = {}\n  if (!values.email) {\n    errors.email = 'Required'\n  }\n\n  if (!values.password) {\n    errors.password = 'Required'\n  }\n\n  return errors\n}\n\nconst renderField = ({ input, label, type, meta: { touched, error } }) => (\n  <div>\n    <label>{label}</label>\n    <div>\n      <input {...input} type={type} />\n      {touched && error && <span>{error}</span>}\n    </div>\n  </div>\n)\n\nconst SignInForm = ({ handleSubmit }) => (\n  <form className=\"auth-form\" onSubmit={handleSubmit}>\n    <div className=\"field\">\n      <Field name=\"email\" component={renderField} type=\"email\" label=\"Email:\" />\n    </div>\n    <div className=\"field\">\n      <Field\n        name=\"password\"\n        component={renderField}\n        type=\"password\"\n        label=\"Password:\"\n      />\n    </div>\n    <input type=\"submit\" value=\"Log in\"></input>\n  </form>\n)\n\nexport default reduxForm({ form: 'signIn', validate })(SignInForm)\n\nSignInForm.propTypes = {\n  handleSubmit: t.func.isRequired,\n}\n","import React from 'react'\nimport { connect, useDispatch } from 'react-redux'\nimport { Redirect, Link } from 'react-router-dom'\nimport SignInForm from './signInForm'\nimport t from 'prop-types'\nimport { signInRequest, getToken, getSignInErrorMessage } from './authSlice'\n\nconst SignIn = ({ token, error }) => {\n  const dispatch = useDispatch()\n\n  const submit = ({ email, password }) =>\n    dispatch(signInRequest({ email, password }))\n\n  if (token) {\n    return <Redirect to=\"/\" />\n  }\n\n  return (\n    <div className=\"auth-box\">\n      <h2>Taskki</h2>\n      {error && <div>{error}</div>}\n      <SignInForm onSubmit={submit} />\n      <Link to=\"/signup\">Sign Up</Link>\n    </div>\n  )\n}\n\nexport default connect((state) => ({\n  token: getToken(state),\n  error: getSignInErrorMessage(state),\n}))(SignIn)\n\nSignIn.propTypes = {\n  token: t.string,\n  error: t.string,\n}\n","import React from 'react'\nimport { reduxForm, Field } from 'redux-form'\nimport t from 'prop-types'\n\nconst validate = (values) => {\n  const errors = {}\n  if (!values.username) {\n    errors.username = 'Required'\n  }\n\n  if (!values.email) {\n    errors.email = 'Required'\n  }\n\n  if (!values.password) {\n    errors.password = 'Required'\n  }\n\n  return errors\n}\n\nconst renderField = ({ input, label, type, meta: { touched, error } }) => (\n  <div>\n    <label>{label}</label>\n    <div>\n      <input {...input} type={type} />\n      {touched && error && <span>{error}</span>}\n    </div>\n  </div>\n)\n\nconst SignUpForm = ({ handleSubmit }) => (\n  <form className=\"auth-form\" onSubmit={handleSubmit}>\n    <div className=\"field\">\n      <Field\n        name=\"username\"\n        component={renderField}\n        type=\"text\"\n        label=\"Username:\"\n      />\n    </div>\n    <div className=\"field\">\n      <Field name=\"email\" component={renderField} type=\"email\" label=\"Email:\" />\n    </div>\n    <div className=\"field\">\n      <Field\n        name=\"password\"\n        component={renderField}\n        type=\"password\"\n        label=\"Password:\"\n      />\n    </div>\n    <input type=\"submit\" value=\"Sign Up\"></input>\n  </form>\n)\n\nSignUpForm.propTypes = {\n  handleSubmit: t.func.isRequired,\n}\n\nexport default reduxForm({ form: 'signUp', validate })(SignUpForm)\n","import React from 'react'\nimport { Link, Redirect } from 'react-router-dom'\nimport { useDispatch, connect } from 'react-redux'\nimport SignUpForm from './signUpForm'\nimport t from 'prop-types'\nimport { signUpRequest, getToken, getSignUpErrorMessage } from './authSlice'\n\nconst SignUp = ({ token, error }) => {\n  const dispatch = useDispatch()\n\n  const submit = ({ username, email, password }) =>\n    dispatch(signUpRequest({ username, email, password }))\n\n  if (token) {\n    return <Redirect to=\"/\" />\n  }\n\n  return (\n    <div className=\"auth-box\">\n      <h2>Taskki</h2>\n      {error && <div>{error}</div>}\n      <SignUpForm onSubmit={submit} />\n      <Link to=\"/signin\">Log In</Link>\n    </div>\n  )\n}\n\nexport default connect((state) => ({\n  token: getToken(state),\n  error: getSignUpErrorMessage(state),\n}))(SignUp)\n\nSignUp.propTypes = {\n  token: t.string,\n  error: t.string,\n}\n","import React from 'react'\r\nimport Tasks from '../features/tasks/tasks'\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport SignIn from '../features/auth/signIn'\r\nimport SignUp from '../features/auth/signUp'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Switch>\r\n        <Route path=\"/signin\" component={SignIn} />\r\n        <Route path=\"/signup\" component={SignUp} />\r\n        <Route exact path=\"/\" component={Tasks} />\r\n        {/* <Route component={NotFound} /> */}\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  combineReducers,\r\n} from '@reduxjs/toolkit'\r\nimport tasksReducer from '../features/tasks/tasksSlice'\r\nimport authReducer from '../features/auth/authSlice'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport logger from 'redux-logger'\r\nimport { load } from '../util/localStorageUtil'\r\n\r\nconst middleware = [...getDefaultMiddleware()]\r\nif (process.env.NODE_ENV === 'development') {\r\n  middleware.push(logger)\r\n}\r\n\r\nconst combinedReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  form: formReducer,\r\n  auth: authReducer,\r\n})\r\n\r\nconst rootReducer = (state, action) => {\r\n  if (action.type === 'logout') {\r\n    localStorage.removeItem('user')\r\n    state = undefined\r\n  }\r\n  return combinedReducer(state, action)\r\n}\r\n\r\nexport default configureStore({\r\n  reducer: rootReducer,\r\n  preloadedState: {\r\n    auth: { currentUser: load('user') },\r\n  },\r\n  middleware,\r\n})\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          // eslint-disable-next-line no-console\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n\r\n              // eslint-disable-next-line no-console\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n\r\n              // eslint-disable-next-line no-console\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      // eslint-disable-next-line no-console\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      // eslint-disable-next-line no-console\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './app/app'\r\nimport store from './app/store'\r\nimport { Provider } from 'react-redux'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { ThemeProvider } from 'theme-ui'\r\nimport theme from './theme'\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <Router>\r\n          <App />\r\n        </Router>\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","export default {\n  fonts: {\n    body: 'system-ui, sans-serif',\n    heading: '\"Avenir Next\", sans-serif',\n    monospace: 'Menlo, monospace',\n  },\n  colors: {\n    text: '#fff',\n    background: '#363537',\n    primary: '#33e',\n  },\n}\n"],"sourceRoot":""}